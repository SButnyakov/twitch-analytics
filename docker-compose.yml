services:
  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_MESSAGE_MAX_BYTES: 20000000
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - es_network

  fetcher:
    build: ./twitch-data-fetcher
    depends_on:
      - broker
    restart: unless-stopped
    networks:
      - es_network
  
  aggregator:
    build: ./twitch-data-aggregator
    depends_on:
      - broker
      - clickhouse
      - redis
    restart: unless-stopped
    networks:
      - es_network
    
  api:
    build: ./twitch-data-api
    depends_on:
      - clickhouse
      - redis
    restart: unless-stopped
    networks:
      - es_network

  frontend:
    build: ./twitch-analytics-frontend
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - es_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - es_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./export.ndjson:/usr/share/kibana/export.ndjson
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - es_network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse-server
    environment:
      - CLICKHOUSE_DB=default
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=default
    ports:
      - "8123:8123"  # HTTP интерфейс
      - "9000:9000"  # TCP интерфейс для клиентов
      - "9009:9009"  # Интерфейс для репликации
    volumes:
      - clickhouse-data:/var/lib/clickhouse  # Монтирование тома для хранения данных
    restart: unless-stopped
    networks:
      - es_network

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redisvol:/root/redis
    environment:
      - REDIS_PASSWORD=""
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - es_network

volumes:
  clickhouse-data:
    driver: local
  es_data:
    driver: local
  redisvol:
    driver: local

networks:
  es_network:
